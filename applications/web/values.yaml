# Default values for docker-template.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

auto_deploy: true

replicaCount: 1

topology: 
  enabled: false
  maxSkew:
  topologyKey:
  whenUnsatisfiable:
  labelSelector: 
    enabled: false
    matchLabels: {}

terminationGracePeriodSeconds: 30

image:
  repository: public.ecr.aws/o1j4x7p4/hello-porter
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest
  # A single imagePullSecret that will be injected into the deployment; only use in extreme cases, else it must be left blank. 
  imagePullSecret:

podLabels: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  port: 80

additionalServices: []

statefulset:
  enabled: false

ingress:
  enabled: true
  hosts: []
  porter_hosts: []
  provider: aws
  custom_domain: false
  custom_paths: []
  rewriteCustomPathsEnabled: true
  annotations: {}
  wildcard: false
  tls: true
  useDefaultIngressTLSSecret: false
  separateTlsPerCustomDomain: true
  customTls:
    enabled: false
    customTlsSecret:

multipleWildcardIngress:
  enabled: false
  ingressClass: nginx
  # hosts contains a list of objects, each object contains a hostName and a tlsSecret
  # Leave tlsSecret blank ONLY if you want to allow Ingress for a specific host without TLS
  hosts: []
  custom_domain: true
  rewriteCustomPathsEnabled: true
  annotations: {}

albIngress:
  enabled: false
  external_dns: false
  ssl_policy: ELBSecurityPolicy-2016-08
  hosts: []
  certificate_arn:
  custom_paths: []
  group_name:
  group_order:
  target_type: ip
  scheme: internet-facing
  security_groups:
  wafv2_acl_arn:
  healthcheck_path:
  healthcheck_interval_seconds:
  healthcheck_timeout_seconds:
  healthcheck_success_codes:
  healthcheck_healthy_threshold_count:
  healthcheck_unhealthy_threshold_count:
  healthcheck_port:
  healthcheck_protocol:
  target_node_labels:
  annotations:

privateIngress:
  enabled: false
  privateIngressClass:
  hosts: []
  custom_paths: []
  annotations: {}
  tls: false
  clusterIssuer: letsencrypt-prod-private

container:
  port: 80
  command:
  # Deprecated: use argList instead
  args:
  argList: []
  env:
    normal:
  lifecycle:
    postStart:
    preStop:

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  setCPULimits: false
  limits: {}

autoscaling:
  enabled: false
  gpu: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 50
  targetGPUUtilizationPercentage: 100
  targetGPUMemoryUtilizationRatio: 1
  behavior:
    enabled: false
    scaleDown:
      periodSeconds: 600
      type: Pods
      value: 1
    scaleUp:
      periodSeconds: 60
      type: Pods
      value: 1

keda:
  enabled: false
  pollingInterval: 30
  cooldownPeriod: 300
  minReplicaCount: 1
  maxReplicaCount: 10
  fallback:
    failureThreshold: 3
    failureReplicas: 6
  hpa:
    scaleUp:
      stabilizationWindowSeconds: 300
      policy:
        type: Percent
        value: 10
        periodSeconds: 300
    scaleDown:
      stabilizationWindowSeconds: 300
      policy:
        type: Percent
        value: 10
        periodSeconds: 300
  trigger:
    metricName: ""
    metricType: AverageValue
    metricQuery: ""
    metricThreshold: ""
  triggers: []

health:
  livenessProbe:
    enabled: false
    path: "/livez"
    scheme: "HTTP"
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 15
    httpHeaders: []
    auth:
      enabled: false
      username: ""
      password: ""

  livenessCommand:
    enabled: false
    command: "ls -l"
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 8

  readinessProbe:
    enabled: false
    path: "/readyz"
    scheme: "HTTP"
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 15
    httpHeaders: []
    auth:
      enabled: false
      username: ""
      password: ""

  startupProbe:
    enabled: false
    path: "/startupz"
    scheme: "HTTP"
    failureThreshold: 3
    periodSeconds: 5
    timeoutSeconds: 1
    httpHeaders: []
    auth:
      enabled: false
      username: ""
      password: ""

podDisruptionBudget:
  enabled: false

pvc:
  enabled: false
  storage: 20Gi
  mountPath: /mypath
  existingVolume: ""

cloudsql:
  enabled: false
  connections: []
    # - name: "abcdedfg"
    #   port: 34343
  connectionName: "" # deprecated, keeping for backwards compatibility. use connections instead.
  dbPort: 5432
  serviceAccountJSON: ""
  serviceAccountJSONSecret: ""
  additionalConnection: # deprecated, keeping for backwards compatibility. use connections instead. 
    enabled: false
    dbPort: 5432
    connectionName: ""

datadog:
  enabled: false

datadogSocketVolume:
  enabled: false

# Set this to add entries to the /etc/hosts file
# Format: hostAliases: [{ip: <IP>, hostnames: [<HOSTNAME>,..]},..]
hostAliases: []

# Set this for enabling DNS extensions over TCP
# We enable this by default.
enableEDNS0: true

nodeSelector: {}

tolerations: []

bluegreen:
  enabled: false

  # if this is set to true, the main deployment won't render and the service selector will use the
  # activeImageTag. For zero-downtime updates, set this to false until the new deployments are created,
  # and then set this to true.
  disablePrimaryDeployment: false

  # if bluegreen is enabled, set the activeImageTag and the list of imageTags
  # activeImageTag: mytag1
  imageTags: []
  # imageTags:
  # - mytag1
  # - mytag2

customNodePort:
  enabled: false
  port: 30000

stack:
  enabled: false
  name: ""
  revision: 0

emptyDir:
  enabled: false
  mountPath: /mypath
  volumeOptions: {}

priorityClassName: ""

# set this to mount files from a secret into the container at /etc/secrets/<mountPath>
# Format: fileSecretMounts: [{secretName: <SECRET_NAME>, mountPath: <MOUNT_PATH>},..]
fileSecretMounts:
  enabled: false
  mounts: []

nodeGroups: []


metricsScraping:
  enabled: false
  port: 80
  path: "/metrics"
