{{- if and (not $.Values.statefulset.enabled) $.Values.bluegreen.enabled -}}
{{- range $v, $tag := $.Values.bluegreen.imageTags }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "docker-template.fullname" $ }}-{{ $tag }}
  labels:
    {{- include "docker-template.labels" $ | nindent 4 }}
spec:
  {{- if not $.Values.autoscaling.enabled }}
  {{- if not $.Values.keda.enabled }}
  replicas: {{ $.Values.replicaCount }}
  {{ end }}
  {{ end }}
  selector:
    matchLabels:
      {{- include "docker-template.selectorLabels" $ | nindent 6 }}
      porter.run/blue-green-value: {{ $tag | quote }}
  template:
    metadata:
      annotations:
        {{- with $.Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "docker-template.selectorLabels" $ | nindent 8 }}
        "porter.run/blue-green-value": {{ $tag | quote }}
    spec:
      serviceAccountName: {{ include "docker-template.serviceAccountName" $ }}
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      {{- if $.Values.enableEDNS0 }}
      dnsConfig:
        options:
          - name: edns0
      {{- end }}
      containers:
        - name: {{ $.Chart.Name }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          {{- if and $.Values.container.command (not (or (eq $.Values.image.repository "porterdev/hello-porter") (eq $.Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter"))) }}
          command:
          {{- range $command := trim $.Values.container.command | splitList " " }}
          - {{ $command | quote }}
          {{- end }}
          {{- end }}
          {{- if or ($.Values.container.lifecycle.postStart) ($.Values.container.lifecycle.preStop) }}
          lifecycle:
            {{- if $.Values.container.lifecycle.postStart }}
            postStart:
              exec:
                command:
                {{- range $command := trim $.Values.container.lifecycle.postStart | splitList " " }}
                - {{ $command | quote }}
                {{- end }}
            {{- end }}
            {{- if $.Values.container.lifecycle.preStop }}
            preStop:
              exec:
                command:
                {{- range $command := trim $.Values.container.lifecycle.preStop | splitList " " }}
                - {{ $command | quote }}
                {{- end }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ $.Values.container.port }}
              protocol: TCP
            {{- range $.Values.container.extraPorts }}
            - name: {{ .name }}
              containerPort: {{ .containerPort }}
              protocol: TCP
            {{- end }}
          {{ if $.Values.health.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ $.Values.health.livenessProbe.path }}
              scheme: {{ $.Values.health.livenessProbe.scheme }}
              port: http
              {{ if or ($.Values.health.livenessProbe.httpHeaders) ($.Values.health.livenessProbe.auth.enabled) }}
              httpHeaders:
                {{ if $.Values.health.livenessProbe.auth.enabled }}
                - name: Authorization
                  value: Basic {{ printf "%s:%s" $.Values.health.livenessProbe.auth.username $.Values.health.livenessProbe.auth.password | b64enc }}
                {{ end }}
                {{- range $.Values.health.livenessProbe.httpHeaders }}
                - name: {{ .name }}
                  value: {{ .value }}
                {{- end }}
              {{ end }}
            initialDelaySeconds: {{ $.Values.health.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.health.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.health.livenessProbe.timeoutSeconds }}
            successThreshold: {{ $.Values.health.livenessProbe.successThreshold }}
            failureThreshold: {{ $.Values.health.livenessProbe.failureThreshold }}
          {{ end }}
          {{ if $.Values.health.livenessCommand.enabled }}
          livenessProbe:
            exec:
              command:
                {{- range $command := trim $.Values.health.livenessCommand.command | splitList " " }}
                - {{ $command | quote }}
                {{- end }}
            initialDelaySeconds: {{ $.Values.health.livenessCommand.initialDelaySeconds }}
            periodSeconds: {{ $.Values.health.livenessCommand.periodSeconds }}
            timeoutSeconds: {{ $.Values.health.livenessCommand.timeoutSeconds }}
            successThreshold: {{ $.Values.health.livenessCommand.successThreshold }}
            failureThreshold: {{ $.Values.health.livenessCommand.failureThreshold }}
          {{ end }}
          {{ if $.Values.health.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ $.Values.health.readinessProbe.path }}
              scheme: {{ $.Values.health.readinessProbe.scheme }}
              port: http
              {{ if or ($.Values.health.readinessProbe.httpHeaders) ($.Values.health.readinessProbe.auth.enabled) }}
              httpHeaders:
                {{ if $.Values.health.readinessProbe.auth.enabled }}
                - name: Authorization
                  value: Basic {{ printf "%s:%s" $.Values.health.readinessProbe.auth.username $.Values.health.readinessProbe.auth.password | b64enc }}
                {{ end }}
                {{- range $.Values.health.readinessProbe.httpHeaders }}
                - name: {{ .name }}
                  value: {{ .value }}
                {{- end }}
              {{ end }}
            initialDelaySeconds: {{ $.Values.health.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.health.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.health.readinessProbe.timeoutSeconds }}
            successThreshold: {{ $.Values.health.readinessProbe.successThreshold }}
            failureThreshold: {{ $.Values.health.readinessProbe.failureThreshold }}
          {{ end }}
          {{ if $.Values.health.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ $.Values.health.startupProbe.path }}
              scheme: {{ $.Values.health.startupProbe.scheme }}
              port: http
            {{ if or ($.Values.health.startupProbe.httpHeaders) ($.Values.health.startupProbe.auth.enabled) }}
              httpHeaders:
                {{ if $.Values.health.startupProbe.auth.enabled }}
                - name: Authorization
                  value: Basic {{ printf "%s:%s" $.Values.health.startupProbe.auth.username $.Values.health.startupProbe.auth.password | b64enc }}
                {{ end }}
                {{- range $.Values.health.startupProbe.httpHeaders }}
                - name: {{ .name }}
                  value: {{ .value }}
                {{- end }}
              {{ end }}
            initialDelaySeconds: {{ $.Values.health.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.health.startupProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.health.startupProbe.timeoutSeconds }}
            successThreshold: {{ $.Values.health.startupProbe.successThreshold }}
            failureThreshold: {{ $.Values.health.startupProbe.failureThreshold }}
          {{ end }}
          resources:
            requests:
              cpu: {{ $.Values.resources.requests.cpu }}
              memory: {{ $.Values.resources.requests.memory }}
            limits:
              {{- if $.Values.resources.setCPULimits }}
                {{- if $.Values.resources.limits.cpu }}
              cpu: {{ $.Values.resources.limits.cpu }}
                {{- else }}
              cpu: {{ $.Values.resources.requests.cpu }}
                {{- end }}
              {{- end }}
              {{- if $.Values.resources.limits.memory }}
              memory: {{ $.Values.resources.limits.memory }}
              {{- else }}
              memory: {{ $.Values.resources.requests.memory }}
              {{- end }}
          env:
            # Porter default environment variables
            - name: PORTER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: PORTER_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PORTER_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PORTER_POD_IMAGE_TAG
              value: "{{ $tag }}"
            {{- range $key, $val := $.Values.container.env.normal }}
            - name: {{ $key }}
            {{- $splVal := split "_" $val -}}
            {{- if and (len $splVal | eq 2) (eq $splVal._0 "PORTERSECRET") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $splVal._1 }}
                  key: {{ $key }}
            {{- else }}
              value: {{ quote $val }}
            {{- end }}
            {{- end }}
            {{- range $syncedEnv := $.Values.container.env.synced }}
            {{- range $key := $syncedEnv.keys }}
            - name: {{ $key.name }}
              {{- if $key.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- if or (eq $.Values.image.repository "porterdev/hello-porter") (eq $.Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter") }}
            - name: PORT
              value: {{ $.Values.container.port | quote }}
            {{- end }}
          {{ if $.Values.pvc.enabled }}
          volumeMounts:
            - name: "{{ include "docker-template.fullname" $ }}-storage"
              mountPath: {{ $.Values.pvc.mountPath }}
          {{ end }}
          {{ if $.Values.emptyDir.enabled }}
          volumeMounts:
            - name: "{{ include "docker-template.fullname" . }}-empty-dir-storage"
            mountPath: {{ $.Values.emptyDir.mountPath }}
          {{ end }}
        {{- if $.Values.cloudsql.enabled }}
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.17
          command:
            - "/cloud_sql_proxy"
            - "-instances={{ $.Values.cloudsql.connectionName }}=tcp:{{ $.Values.cloudsql.dbPort }}"
            - "-credential_file=/secrets/service_account.json"
            {{ if $.Values.terminationGracePeriodSeconds }}
            - "-term_timeout={{ $.Values.terminationGracePeriodSeconds }}s"
            {{ end }}
          securityContext:
            runAsNonRoot: true
          volumeMounts:
          - name: "sidecar-volume-{{ include "docker-template.fullname" $ }}"
            mountPath: /secrets/
            readOnly: true
        {{ end }}
      {{- if gt (len $.Values.nodeSelector) 0}}
      nodeSelector:
        {{- range $k, $v := $.Values.nodeSelector }}
        {{ $k }}: {{ $v }}
        {{- end }}
      {{- end }}
      {{- if $.Values.priorityClassName }}
      priorityClassName: {{ $.Values.priorityClassName }}
      {{- end }}
      tolerations:
        - key: "removable"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      {{- if $.Values.tolerations }}
        {{- toYaml $.Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if $.Values.topology.enabled }}
      topologySpreadConstraints: 
        - maxSkew: {{ $.Values.topology.maxSkew }}
          topologyKey: {{ $.Values.topology.topologyKey }}
          whenUnsatisfiable: {{ $.Values.topology.whenUnsatisfiable }}
          {{- if $.Values.topology.labelSelector.enabled }}
          labelSelector: 
            matchLabels:
              {{- range $k, $v := $.Values.topology.labelSelector.matchLabels }}
              {{ $k }}: {{ $v }}
              {{- end }}
          {{- end }}
      {{ end }}
      {{ if or $.Values.pvc.enabled $.Values.cloudsql.enabled $.Values.emptyDir.enabled }}
      volumes:
        {{ if $.Values.cloudsql.enabled }}
        - name: "sidecar-volume-{{ include "docker-template.fullname" $ }}"
          secret:
            secretName: "{{ include "cloudsql.serviceAccountJSONSecret" $ }}"
        {{ end }}
        {{ if $.Values.pvc.enabled }}
        - name: "{{ include "docker-template.fullname" . }}-storage"
          persistentVolumeClaim:
        {{ if not (eq $.Values.pvc.existingVolume "")}}
            claimName: {{ $.Values.pvc.existingVolume }}
        {{ else }}
            claimName: "{{ include "docker-template.fullname" $ }}-pvc"
        {{ end }}
        {{ end }}
        {{ if $.Values.emptyDir.enabled }}
        - name: "{{ include "docker-template.fullname" . }}-empty-dir-storage"
          emptyDir: {}
        {{ end }}
      {{ end }}
{{- if not (eq $v (sub (len $.Values.bluegreen.imageTags) 1) ) }}
---
{{- end }}
{{- end }}
{{- end }}
