{{- if or (ne .Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter-job") (.Values.global) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "docker-template.fullname" . }}
  labels:
    getporter.dev/manifest: "true"
data:
  manifest: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{ .Release.Name }}-{{ randAlphaNum 10 | lower }}"
      namespace: {{ .Release.Namespace | quote }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        helm.sh/revision: "{{ .Release.Revision }}"
        meta.helm.sh/release-name: "{{ .Release.Name }}"
        {{- if .Values.podLabels }}
        {{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
    spec:
      backoffLimit: 0
      {{- if (.Values.sidecar.timeout) }}
      activeDeadlineSeconds: {{ add .Values.sidecar.timeout 300 }}
      {{- end }}
      template:
        metadata:
          name: "{{ .Release.Name }}"
          labels:
            app.kubernetes.io/instance: {{ .Release.Name | quote }}
            helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
            helm.sh/revision: "{{ .Release.Revision }}"
            meta.helm.sh/release-name: "{{ .Release.Name }}"
            {{- if .Values.podLabels }}
            {{- toYaml .Values.podLabels | nindent 12 }}
            {{- end }}
          annotations:
            {{- if .Values.safeToEvict }}
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
            {{- else }}
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
            {{- end }}
        spec:
          restartPolicy: Never
          shareProcessNamespace: true
          nodeSelector: {{- toYaml .Values.nodeSelector | nindent 12 }}
          {{- if .Values.priorityClassName }}
          priorityClassName: {{ .Values.priorityClassName }}
          {{- end }}
          tolerations: 
          {{ if .Values.tolerations}}
          {{ toYaml .Values.tolerations | nindent 12 }}
          {{ end }}
            - key: "removable"
              operator: "Equal"
              value: "true"
              effect: "NoSchedule"
          {{- if .Values.serviceAccount.create }}
          serviceAccountName: cronjob-{{ include "docker-template.serviceAccountName" . }}
          {{ else }}
          serviceAccountName: {{ include "docker-template.serviceAccountName" . }}
          {{- end }}
          {{- if .Values.enableEDNS0 }}
          dnsConfig:
            options:
              - name: edns0
          {{- end }}
          containers:
          - name: {{ .Chart.Name }}
            {{- if .Values.global }}
            {{- if .Values.global.image }}
            image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}"
            {{- end }}
            {{- else }}
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            {{- end }}
            imagePullPolicy: "{{ .Values.image.pullPolicy }}"
            {{- if .Values.global }}
            {{- if .Values.global.image }}
            {{- if and .Values.container.command (not (eq .Values.global.image.repository "public.ecr.aws/o1j4x7p4/hello-porter")) }}
            command:
            {{- range $command := trim .Values.container.command | splitList " " }}
            - {{ $command | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- else }}
            {{- if (and .Values.container.command (not (or (eq .Values.image.repository "porterdev/hello-porter") (eq .Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter-job")))) }}
            command:
            {{- range $command := trim .Values.container.command | splitList " " }}
            - {{ $command | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.container.args }}
            args:
            {{- range $arg := .Values.container.args }}
            - {{ $arg | quote }}
            {{- end }}
            {{- end }}
            envFrom:
            {{ range $configMapName := .Values.configMapRefs }}
              - configMapRef:
                  name: {{ $configMapName }}
            {{ end }}
            {{ range $secretName := .Values.secretRefs }}
              - secretRef:
                  name: {{ $secretName }}
            {{ end }}
            env:
            {{- range $key, $val := .Values.container.env.normal }}
            - name: {{ $key }}
            {{- $splVal := split "_" $val -}}
            {{- if and (len $splVal | eq 2) (eq $splVal._0 "PORTERSECRET") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $splVal._1 }}
                  key: {{ $key }}
            {{- else }}
              value: {{ quote $val }}
            {{- end }}
            {{- end }}
            {{- range $syncedEnv := .Values.container.env.synced }}
            {{- range $key := $syncedEnv.keys }}
            - name: {{ $key.name }}
              {{- if $key.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- end }}
            {{- end }}
            {{- end }}
            resources:
              requests:
                cpu: {{ .Values.resources.requests.cpu }}
                memory: {{ .Values.resources.requests.memory }}
              limits:
                {{- if .Values.resources.setCPULimits }}
                  {{- if .Values.resources.limits.cpu }}
                cpu: {{ .Values.resources.limits.cpu }}
                  {{- else }}
                cpu: {{ .Values.resources.requests.cpu }}
                  {{- end }}
                {{- end }}
                {{- if .Values.resources.limits.memory }}
                memory: {{ .Values.resources.limits.memory }}
                {{- else }}
                memory: {{ .Values.resources.requests.memory }}
                {{- end }}
          - name: sidecar
            image: ghcr.io/porter-dev/job_sidecar_container:latest
            imagePullPolicy: Always
            resources:
              requests:
                cpu: {{ .Values.sidecar.resources.requests.cpu }}
                memory: {{ .Values.sidecar.resources.requests.memory }}
              limits:
                {{- if (.Values.resources.setCPULimits) }}
                cpu: {{ .Values.sidecar.resources.requests.cpu }}
                {{ end }}
                memory: {{ .Values.sidecar.resources.requests.memory }}
            {{- if (.Values.sidecar.timeout) }}
            env:
            - name: TIMEOUT
              value: {{ .Values.sidecar.timeout | quote }}
            {{- end }}
            command:
            - "./job_killer.sh"
            {{- if (.Values.sidecar.signalChildProcesses) }}
            - "-c"
            {{- end }}
            - {{ .Values.terminationGracePeriodSeconds | quote }}
            {{- $cmdSpl := trim .Values.container.command | splitList " " }}
            - {{ $cmdSpl| first | quote }}
            {{- if .Values.cloudsql.enabled }}
            - "cloud_sql_proxy"
            {{- end }}
          {{- if .Values.cloudsql.enabled }}
          - name: cloud-sql-proxy
            image: gcr.io/cloudsql-docker/gce-proxy:1.17
            command:
              - "/cloud_sql_proxy"
              - "-instances={{ .Values.cloudsql.connectionName }}=tcp:{{ .Values.cloudsql.dbPort }}"
              - "-credential_file=/secrets/service_account.json"
              {{ if .Values.terminationGracePeriodSeconds }}
              - "-term_timeout={{ .Values.terminationGracePeriodSeconds }}s"
              {{ end }}
            securityContext:
              runAsNonRoot: true
            volumeMounts:
            - name: "sidecar-volume-{{ include "docker-template.fullname" . }}"
              mountPath: /secrets/
              readOnly: true
          {{ end }}
          {{ if .Values.cloudsql.enabled }}
          volumes:
            - name: "sidecar-volume-{{ include "docker-template.fullname" . }}"
              secret:
                secretName: "{{ include "cloudsql.serviceAccountJSONSecret" . }}"
          {{ end }}
{{- end }}
