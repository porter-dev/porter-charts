{{- if ne .Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter-job" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "docker-template.fullname" . }}
  labels:
    getporter.dev/manifest: "true"
data:
  manifest: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{ .Release.Name }}-{{ randAlphaNum 10 | lower }}"
      namespace: {{ .Release.Namespace | quote }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        helm.sh/revision: "{{ .Release.Revision }}"
        meta.helm.sh/release-name: "{{ .Release.Name }}"
    spec:
      backoffLimit: 0
      {{- if (.Values.sidecar.timeout) }}
      activeDeadlineSeconds: {{ .Values.sidecar.timeout }}
      {{- end }}
      template:
        metadata:
          name: "{{ .Release.Name }}"
          labels:
            app.kubernetes.io/instance: {{ .Release.Name | quote }}
            helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
            helm.sh/revision: "{{ .Release.Revision }}"
            meta.helm.sh/release-name: "{{ .Release.Name }}"
          annotations:
            {{- if .Values.safeToEvict }}
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
            {{- else }}
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
            {{- end }}
        spec:
          restartPolicy: Never
          shareProcessNamespace: true
          tolerations: {{- toYaml .Values.tolerations | nindent 6 }}
          - key: "removable"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
          nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
          containers:
          - name: {{ .Chart.Name }}
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: "{{ .Values.image.pullPolicy }}"
            {{- if and .Values.container.command (not (or (eq .Values.image.repository "porterdev/hello-porter-job") (eq .Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter-job"))) }}
            command: 
            {{- range $command := trim .Values.container.command | splitList " " }}
            - {{ $command | quote }}
            {{- end }}
            {{- end }}
            env:
            {{- range $key, $val := .Values.container.env.normal }}
            - name: {{ $key }}
            {{- $splVal := split "_" $val -}}
            {{- if and (len $splVal | eq 2) (eq $splVal._0 "PORTERSECRET") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $splVal._1 }}
                  key: {{ $key }}
            {{- else }}
              value: {{ quote $val }}
            {{- end }}
            {{- end }}
            {{- range $syncedEnv := .Values.container.env.synced }}
            {{- range $key := $syncedEnv.keys }}
            - name: {{ $key.name }}
              {{- if $key.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- end }}
            {{- end }}
            {{- end }}
            resources:
              requests:
                cpu: {{ .Values.resources.requests.cpu }}
                memory: {{ .Values.resources.requests.memory }}
              limits:
                memory: {{ .Values.resources.requests.memory }}
          - name: sidecar
            image: public.ecr.aws/o1j4x7p4/job-sidecar:latest
            imagePullPolicy: Always
            resources:
              requests:
                cpu: {{ .Values.sidecar.resources.requests.cpu }}
                memory: {{ .Values.sidecar.resources.requests.memory }}
              limits:
                memory: {{ .Values.sidecar.resources.requests.memory }}
            {{- if (.Values.sidecar.timeout) }}
            env:
            - name: TIMEOUT
              value: {{ .Values.sidecar.timeout | quote }}
            {{- end }}
            command:
            - "./job_killer.sh"
            {{- if (.Values.sidecar.signalChildProcesses) }}
            - "-c"
            {{- end }}
            - {{ .Values.terminationGracePeriodSeconds | quote }}
            {{- $cmdSpl := trim .Values.container.command | splitList " " }}
            - {{ $cmdSpl| first | quote }}
            {{- if .Values.cloudsql.enabled }}
            - "cloud_sql_proxy"
            {{- end }}
          {{- if .Values.cloudsql.enabled }}
          - name: cloud-sql-proxy
            image: gcr.io/cloudsql-docker/gce-proxy:1.17
            command:
              - "/cloud_sql_proxy"
              - "-instances={{ .Values.cloudsql.connectionName }}=tcp:{{ .Values.cloudsql.dbPort }}"
              - "-credential_file=/secrets/service_account.json"
            securityContext:
              runAsNonRoot: true
            volumeMounts:
            - name: "sidecar-volume-{{ include "docker-template.fullname" . }}"
              mountPath: /secrets/
              readOnly: true
          {{ end }}
          {{ if .Values.cloudsql.enabled }}
          volumes:
            - name: "sidecar-volume-{{ include "docker-template.fullname" . }}"
              secret:
                secretName: "cloudsql-secret-{{ include "docker-template.fullname" . }}"
          {{ end }}
          
{{- end }}