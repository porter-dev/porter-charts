apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: application-pool
  namespace: kube-system
spec:
  template:
    metadata:
      labels:
        porter.run/managed: "true"
        porter.run/workload-kind: application
    spec:
      nodeClassRef:
        name: application-class
        kind: EC2NodeClass
        group: karpenter.k8s.aws
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: node.kubernetes.io/instance-category
          operator: In
          values: ["t", "c", "m"]
        - key: topology.kubernetes.io/zone
          operator: In
          values: ["us-east-1a", "us-east-1b", "us-east-1c"]
  limits:
    cpu: "40"      # Max size 10 * t3.medium (2 vCPU)
    memory: "40Gi" # Max size 10 * t3.medium (4 GiB)
  disruption:
    consolidationPolicy: WhenUnderutilized
    consolidateAfter: 30s
    expireAfter: 720h  # 30 days
  weight: 10
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: application-class
  namespace: kube-system
spec:
  role: porter-node-manager
  amiFamily: AL2
  amiSelectorTerms:
    - name: "amazon-eks-node-1.28-*"
  subnetSelectorTerms:
    - tags:
        kubernetes.io/cluster/dev-cluster-68kxbz: shared
        kubernetes.io/role/internal-elb: "1"
  securityGroupSelectorTerms:
    - tags:
        kubernetes.io/cluster/dev-cluster-68kxbz: owned
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 50Gi
        volumeType: gp3
        encrypted: true
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  tags:
    porter.run/managed: "true"
    porter.run/workload-kind: application 