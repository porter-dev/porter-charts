{{- if .Values.controller.wallarm.enabled }}
{{- if eq .Values.controller.wallarm.tarantool.kind "DaemonSet" }}
apiVersion: {{ template "deployment.apiVersion" . }}
kind: DaemonSet
metadata:
  labels:
    app: {{ template "nginx-ingress.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ template "nginx-ingress.wallarmTarantoolName" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "nginx-ingress.controller.fullname" . }}-wallarm-tarantool
spec:
  selector:
    matchLabels:
      app: {{ template "nginx-ingress.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nginx-ingress.name" . }}
        component: {{ template "nginx-ingress.wallarmTarantoolName" . }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.controller.wallarm.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.controller.wallarm.imagePullSecrets | indent 8 }}
      {{- end }}
      initContainers:
{{ include "nginx-ingress.wallarmInitContainer" . | indent 8 }}
      containers:
{{ include "nginx-ingress.wallarmExportEnvContainer" . | indent 8 }}
        - name: tarantool
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          imagePullPolicy: "{{ .Values.controller.image.pullPolicy }}"
          args: ["/usr/bin/wtarantool", "/usr/share/wallarm-tarantool/init.lua"]
          env:
            - name: LOGFILE
              value: /dev/stdout
            - name: SLAB_ALLOC_ARENA
              value: "{{ .Values.controller.wallarm.tarantool.arena }}"
            - name: HOST
              value: "0.0.0.0"
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          livenessProbe:
            tcpSocket:
              port: {{ template "nginx-ingress.wallarmTarantoolPort" . }}
            initialDelaySeconds: {{ .Values.controller.wallarm.tarantool.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.controller.wallarm.tarantool.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.controller.wallarm.tarantool.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.controller.wallarm.tarantool.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.controller.wallarm.tarantool.livenessProbe.failureThreshold }}
          ports:
            - name: tarantool
              containerPort: {{ template "nginx-ingress.wallarmTarantoolPort" . }}
              protocol: TCP
          volumeMounts:
            - name: wallarm
              mountPath: /etc/wallarm
          resources:
{{ toYaml .Values.controller.wallarm.tarantool.resources | indent 12 }}
        - name: heartbeat
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          command: ["/usr/share/wallarm-common/synccloud"]
          env:
          - name: WALLARM_API_HOST
            value: {{ .Values.controller.wallarm.apiHost | default "api.wallarm.com" }}
          - name: WALLARM_API_PORT
            value: {{ .Values.controller.wallarm.apiPort | default "444" | quote }}
          - name: WALLARM_API_USE_SSL
            {{- if or (.Values.controller.wallarm.apiSSL) (eq (.Values.controller.wallarm.apiSSL | toString) "<nil>") }}
            value: "true"
            {{- else }}
            value: "false"
            {{- end }}
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: {{ template "nginx-ingress.wallarmSecret" . }}
          - name: WALLARM_SYNCNODE
            value: "no"
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
{{ toYaml .Values.controller.wallarm.heartbeat.resources | indent 12 }}
        - name: sync-markers
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          command: ["sh", "-c", "while true; do timeout -k 1m 1h /usr/share/wallarm-common/sync-markers -l STDOUT || true; sleep 60; done"]
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
{{ toYaml (index .Values "controller" "wallarm" "sync-markers" "resources") | indent 12 }}
        - name: export-attacks
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          command: ["sh", "-c", "while true; do timeout -k 1m 3h /usr/share/wallarm-common/export-attacks -l STDOUT || true; done"]
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
{{ toYaml (index .Values "controller" "wallarm" "export-attacks" "resources") | indent 12 }}
        - name: export-counters
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          command: ["sh", "-c", "while true; do timeout -k 15s 11m /usr/share/wallarm-common/export-counters -l STDOUT || true; sleep 60; done"]
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
{{ toYaml (index .Values "controller" "wallarm" "export-counters" "resources") | indent 12 }}
        - name: brute-detect
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          command: ["sh", "-c", "while true; do timeout -k 15s 6m /usr/share/wallarm-common/brute-detect -l STDOUT || true; sleep 60; done"]
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
{{ toYaml (index .Values "controller" "wallarm" "brute-detect" "resources") | indent 12 }}
        - name: wallarm-appstructure
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
          command: ["/usr/bin/wallarm-appstructure-client", "--config-file", "/etc/wallarm/node.yaml"]
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          {{- if .Values.podSecurityPolicy.enabled }}
          securityContext:
            runAsUser: {{ .Values.controller.image.runAsUser | default 65534 }}
          {{- end }}
          resources:
{{ toYaml (index .Values "controller" "wallarm" "wallarm-appstructure" "resources") | indent 12 }}
    {{- if .Values.controller.wallarm.tarantool.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.controller.wallarm.tarantool.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.controller.wallarm.tarantool.tolerations }}
      tolerations:
{{ toYaml .Values.controller.wallarm.tarantool.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.controller.wallarm.tarantool.affinity }}
      affinity:
{{ toYaml .Values.controller.wallarm.tarantool.affinity | indent 8 }}
    {{- end }}
      volumes:
        - name: wallarm
          emptyDir: {}
{{- end }}
{{- end }}
